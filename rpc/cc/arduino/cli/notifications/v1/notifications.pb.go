// This file is part of arduino-cli.
//
// Copyright 2020 ARDUINO SA (http://www.arduino.cc/)
//
// This software is released under the GNU General Public License version 3,
// which covers the main part of arduino-cli.
// The terms of this license can be found at:
// https://www.gnu.org/licenses/gpl-3.0.en.html
//
// You can be released from the requirements of the above licenses by purchasing
// a commercial license. Buying such a license is mandatory if you want to
// modify or otherwise use the software for commercial activities involving the
// Arduino software without disclosing the source code of your own applications.
// To purchase a commercial license, send an email to license@arduino.cc.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: cc/arduino/cli/notifications/v1/notifications.proto

package notifications

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Notification int32

const (
	Notification_NOTIFICATION_UNSPECIFIED Notification = 0
	// Some new core/platform has been found in the hardware folder
	Notification_NOTIFICATION_CORE_CHANGED Notification = 1
)

// Enum value maps for Notification.
var (
	Notification_name = map[int32]string{
		0: "NOTIFICATION_UNSPECIFIED",
		1: "NOTIFICATION_CORE_CHANGED",
	}
	Notification_value = map[string]int32{
		"NOTIFICATION_UNSPECIFIED":  0,
		"NOTIFICATION_CORE_CHANGED": 1,
	}
)

func (x Notification) Enum() *Notification {
	p := new(Notification)
	*p = x
	return p
}

func (x Notification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Notification) Descriptor() protoreflect.EnumDescriptor {
	return file_cc_arduino_cli_notifications_v1_notifications_proto_enumTypes[0].Descriptor()
}

func (Notification) Type() protoreflect.EnumType {
	return &file_cc_arduino_cli_notifications_v1_notifications_proto_enumTypes[0]
}

func (x Notification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Notification.Descriptor instead.
func (Notification) EnumDescriptor() ([]byte, []int) {
	return file_cc_arduino_cli_notifications_v1_notifications_proto_rawDescGZIP(), []int{0}
}

type GetNotificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of notification the client wants to receive.
	// If left empty all notifications are sent, otherwise only those specified.
	Filter []Notification `protobuf:"varint,1,rep,packed,name=filter,proto3,enum=cc.arduino.cli.notifications.v1.Notification" json:"filter,omitempty"`
}

func (x *GetNotificationsRequest) Reset() {
	*x = GetNotificationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cc_arduino_cli_notifications_v1_notifications_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotificationsRequest) ProtoMessage() {}

func (x *GetNotificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cc_arduino_cli_notifications_v1_notifications_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotificationsRequest.ProtoReflect.Descriptor instead.
func (*GetNotificationsRequest) Descriptor() ([]byte, []int) {
	return file_cc_arduino_cli_notifications_v1_notifications_proto_rawDescGZIP(), []int{0}
}

func (x *GetNotificationsRequest) GetFilter() []Notification {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetNotificationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification Notification `protobuf:"varint,1,opt,name=notification,proto3,enum=cc.arduino.cli.notifications.v1.Notification" json:"notification,omitempty"`
}

func (x *GetNotificationsResponse) Reset() {
	*x = GetNotificationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cc_arduino_cli_notifications_v1_notifications_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotificationsResponse) ProtoMessage() {}

func (x *GetNotificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cc_arduino_cli_notifications_v1_notifications_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotificationsResponse.ProtoReflect.Descriptor instead.
func (*GetNotificationsResponse) Descriptor() ([]byte, []int) {
	return file_cc_arduino_cli_notifications_v1_notifications_proto_rawDescGZIP(), []int{1}
}

func (x *GetNotificationsResponse) GetNotification() Notification {
	if x != nil {
		return x.Notification
	}
	return Notification_NOTIFICATION_UNSPECIFIED
}

var File_cc_arduino_cli_notifications_v1_notifications_proto protoreflect.FileDescriptor

var file_cc_arduino_cli_notifications_v1_notifications_proto_rawDesc = []byte{
	0x0a, 0x33, 0x63, 0x63, 0x2f, 0x61, 0x72, 0x64, 0x75, 0x69, 0x6e, 0x6f, 0x2f, 0x63, 0x6c, 0x69,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x63, 0x63, 0x2e, 0x61, 0x72, 0x64, 0x75, 0x69, 0x6e,
	0x6f, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x22, 0x60, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x63, 0x2e, 0x61, 0x72, 0x64, 0x75, 0x69, 0x6e, 0x6f, 0x2e, 0x63,
	0x6c, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x6d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x63, 0x2e,
	0x61, 0x72, 0x64, 0x75, 0x69, 0x6e, 0x6f, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x4b, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x44, 0x10, 0x01, 0x32, 0xa2, 0x01, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x89, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x38, 0x2e, 0x63, 0x63, 0x2e, 0x61, 0x72, 0x64, 0x75, 0x69, 0x6e, 0x6f, 0x2e,
	0x63, 0x6c, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63,
	0x63, 0x2e, 0x61, 0x72, 0x64, 0x75, 0x69, 0x6e, 0x6f, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x52, 0x5a, 0x50, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x64, 0x75, 0x69, 0x6e, 0x6f, 0x2f,
	0x61, 0x72, 0x64, 0x75, 0x69, 0x6e, 0x6f, 0x2d, 0x63, 0x6c, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x2f,
	0x63, 0x63, 0x2f, 0x61, 0x72, 0x64, 0x75, 0x69, 0x6e, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x3b,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cc_arduino_cli_notifications_v1_notifications_proto_rawDescOnce sync.Once
	file_cc_arduino_cli_notifications_v1_notifications_proto_rawDescData = file_cc_arduino_cli_notifications_v1_notifications_proto_rawDesc
)

func file_cc_arduino_cli_notifications_v1_notifications_proto_rawDescGZIP() []byte {
	file_cc_arduino_cli_notifications_v1_notifications_proto_rawDescOnce.Do(func() {
		file_cc_arduino_cli_notifications_v1_notifications_proto_rawDescData = protoimpl.X.CompressGZIP(file_cc_arduino_cli_notifications_v1_notifications_proto_rawDescData)
	})
	return file_cc_arduino_cli_notifications_v1_notifications_proto_rawDescData
}

var file_cc_arduino_cli_notifications_v1_notifications_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cc_arduino_cli_notifications_v1_notifications_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cc_arduino_cli_notifications_v1_notifications_proto_goTypes = []interface{}{
	(Notification)(0),                // 0: cc.arduino.cli.notifications.v1.Notification
	(*GetNotificationsRequest)(nil),  // 1: cc.arduino.cli.notifications.v1.GetNotificationsRequest
	(*GetNotificationsResponse)(nil), // 2: cc.arduino.cli.notifications.v1.GetNotificationsResponse
}
var file_cc_arduino_cli_notifications_v1_notifications_proto_depIdxs = []int32{
	0, // 0: cc.arduino.cli.notifications.v1.GetNotificationsRequest.filter:type_name -> cc.arduino.cli.notifications.v1.Notification
	0, // 1: cc.arduino.cli.notifications.v1.GetNotificationsResponse.notification:type_name -> cc.arduino.cli.notifications.v1.Notification
	1, // 2: cc.arduino.cli.notifications.v1.NotificationsService.GetNotifications:input_type -> cc.arduino.cli.notifications.v1.GetNotificationsRequest
	2, // 3: cc.arduino.cli.notifications.v1.NotificationsService.GetNotifications:output_type -> cc.arduino.cli.notifications.v1.GetNotificationsResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_cc_arduino_cli_notifications_v1_notifications_proto_init() }
func file_cc_arduino_cli_notifications_v1_notifications_proto_init() {
	if File_cc_arduino_cli_notifications_v1_notifications_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cc_arduino_cli_notifications_v1_notifications_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotificationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cc_arduino_cli_notifications_v1_notifications_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotificationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cc_arduino_cli_notifications_v1_notifications_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cc_arduino_cli_notifications_v1_notifications_proto_goTypes,
		DependencyIndexes: file_cc_arduino_cli_notifications_v1_notifications_proto_depIdxs,
		EnumInfos:         file_cc_arduino_cli_notifications_v1_notifications_proto_enumTypes,
		MessageInfos:      file_cc_arduino_cli_notifications_v1_notifications_proto_msgTypes,
	}.Build()
	File_cc_arduino_cli_notifications_v1_notifications_proto = out.File
	file_cc_arduino_cli_notifications_v1_notifications_proto_rawDesc = nil
	file_cc_arduino_cli_notifications_v1_notifications_proto_goTypes = nil
	file_cc_arduino_cli_notifications_v1_notifications_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NotificationsServiceClient is the client API for NotificationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationsServiceClient interface {
	GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (NotificationsService_GetNotificationsClient, error)
}

type notificationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationsServiceClient(cc grpc.ClientConnInterface) NotificationsServiceClient {
	return &notificationsServiceClient{cc}
}

func (c *notificationsServiceClient) GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (NotificationsService_GetNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NotificationsService_serviceDesc.Streams[0], "/cc.arduino.cli.notifications.v1.NotificationsService/GetNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationsServiceGetNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificationsService_GetNotificationsClient interface {
	Recv() (*GetNotificationsResponse, error)
	grpc.ClientStream
}

type notificationsServiceGetNotificationsClient struct {
	grpc.ClientStream
}

func (x *notificationsServiceGetNotificationsClient) Recv() (*GetNotificationsResponse, error) {
	m := new(GetNotificationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotificationsServiceServer is the server API for NotificationsService service.
type NotificationsServiceServer interface {
	GetNotifications(*GetNotificationsRequest, NotificationsService_GetNotificationsServer) error
}

// UnimplementedNotificationsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationsServiceServer struct {
}

func (*UnimplementedNotificationsServiceServer) GetNotifications(*GetNotificationsRequest, NotificationsService_GetNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}

func RegisterNotificationsServiceServer(s *grpc.Server, srv NotificationsServiceServer) {
	s.RegisterService(&_NotificationsService_serviceDesc, srv)
}

func _NotificationsService_GetNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationsServiceServer).GetNotifications(m, &notificationsServiceGetNotificationsServer{stream})
}

type NotificationsService_GetNotificationsServer interface {
	Send(*GetNotificationsResponse) error
	grpc.ServerStream
}

type notificationsServiceGetNotificationsServer struct {
	grpc.ServerStream
}

func (x *notificationsServiceGetNotificationsServer) Send(m *GetNotificationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _NotificationsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cc.arduino.cli.notifications.v1.NotificationsService",
	HandlerType: (*NotificationsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNotifications",
			Handler:       _NotificationsService_GetNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cc/arduino/cli/notifications/v1/notifications.proto",
}
